---
title: "Group Task"
author: "Phong Duong"
format: 
  revealjs:
    width: 1920
    height: 1080
editor: visual
---

## Required packages {visibility="hidden"}

> Insert in the lower chunk the packages you will need

```{r}
rm(list = ls()) 
library(tidyverse)
library(dbplyr)
library(RSQLite)
library(DBI)
library(lubridate)
library(scales)
#fakelibrary
#ana
```

# About the data

## Data

```{r}
#| echo: true
db <- DBI::dbConnect(SQLite(), "database.sqlite", extended_types = T)
```

After pivoting, the data frame became very large (22 million rows on election_data) and makes it too computationally intensive to work with at some point. Therefore, we decided to create a SQL database and migrated all the data there so we can just pull out the needed data tables without having to store them in R environment.

# The Analysis

## Distribution of national parties vs regional

How is the vote of national parties (PSOE, PP, VOX, CS, MP, UP - IU) distributed against regional or nationalist parties?

```{r}
#Create a table in sql db for faster data retrieval
if(!dbListTables(db) %>% str_detect("vote_sum") %>% any()) {
  q1_df <- tbl(db, "election_data_2") %>% 
  select(cod_mun, elec_date, party, vote_count) %>% 
  left_join(tbl(db, "abbrev_2"), by = join_by("party" == "denominacion")) %>% 
  mutate(nat_reg = ifelse(siglas_2 %in% c('PSOE', 'PP','VOX', 'CS', 'MP', 'UP-IU'),'national', 'regional'))
  
  vote_sum <- q1_df %>% 
    group_by(nat_reg, elec_date) %>% 
    summarise(vote_total = sum(vote_count)) 
  vote_sum %>% head()
  compute(vote_sum, temporary = FALSE, name='vote_sum')
}
```

::: columns
::: {.column width="70%"}
### Plot

```{r}
#| fig-height: 7
#| fig-width : 13
plot1_data <- tbl(db, "vote_sum") 
ggplot(plot1_data) +
  geom_col(aes(x = elec_date, y = vote_total/10^6, fill = nat_reg), position = position_dodge2()) +
  labs(y = "Total votes (in millions)")
```
:::

::: {.column width="30%"}
### Data tbl

```{r}
tbl(db, "vote_sum") %>% collect() %>% tibble()
```
:::

National parities largely outweigh regional parties in votes. It is interesting, however, that in some elections there was a surge in votes for regional parties (e.g. in 2011) so there might be interesting events happening in between the election and the former.
:::

## Winner in big municipalities

Which party was the winner in the municipalities with more than 100,000 habitants (census) in each of the elections?

```{r}
#Create another table for ease of computing
if(!dbListTables(db) %>% str_detect("vote_full") %>% any()) {
    vote_full <- tbl(db, "election_data_2") %>% 
      group_by(elec_date, cod_mun) %>% 
      mutate(valid_votes = sum(vote_count) + votos_blancos,
             percent = vote_count/ valid_votes * 100) %>% 
    select(elec_date, cod_mun, party, vote_count, valid_votes, percent)
    compute(vote_full, temporary = FALSE, name = "vote_full")
}
```

```{r}
mun_pop_2 <- tbl(db, "municipal_population") %>% 
  mutate(date = paste(as.integer(anno), mes, "01", sep = "-" )) %>% 
  select(-anno, -mes) 

winner_100k <- tbl(db, "vote_full") %>% 
  left_join(mun_pop_2, by = join_by("cod_mun", "elec_date" == "date")) %>% 
  filter(censo_total > 100000) %>% 
  group_by(elec_date, cod_mun) %>% 
  filter(percent == max(percent)) %>% 
  ungroup() %>% 
  collect()
```

```{r}
#Helper function to look for winner of a certain year
winner <- function(elec) {
 return(
   winner_100k %>% 
     filter(elec_date == elec) %>% 
     group_by(party) %>% 
     summarise(wins = n()) %>% 
     slice_max(wins, n = 1)
 ) 
}
```

```{r}
#| output: false

#2008
winner('2008-03-01')

#2011
winner('2011-11-01')

#2015
winner('2015-12-01')

#2016
winner('2016-06-01')

#2019-1
winner('2019-04-01')

#2019-2
winner('2019-11-01')
```

```{r}
#Summary data frame to make the plot
winner_100k_summary <- winner_100k %>% 
  group_by(elec_date, party) %>% 
  summarise(wins = n()) %>% 
  filter(wins == max(wins)) %>% 
  left_join(tbl(db, "abbrev_2") %>% collect(), by = join_by("party" == "denominacion")) 
```

```{r}
ggplot(winner_100k_summary) +
  geom_col(aes(x= elec_date, y = wins, fill = siglas_2)) +
  geom_text(aes(x = elec_date, y = wins,label = siglas_2), nudge_y = 1) +
  theme(legend.position = "none") 
```

In big municipalities, PP and PSOE win the majority of the time.

## Later {visibility="hidden"}

3.  Which party was the second when the first was the PSOE? And when the first was the PP?

```{r}
#| eval: false
first_second <- tbl(db, "vote_full") %>% 
  left_join(mun_pop_2, by = join_by("cod_mun", "elec_date" == "date")) %>% 
  filter(censo_total > 100000) %>% 
  relocate(censo_total, .after = cod_mun) %>% 
  left_join(tbl(db, "abbrev_2"), by = join_by("party" == "denominacion")) %>% 
  relocate(siglas_2, .after = party) %>% 
  group_by(elec_date, cod_mun) %>% 
  arrange(elec_date, cod_mun) %>% #Check if this necessary
  slice_max(vote_count, n = 2) %>% 
  collect()
```

```{r}
#| eval: false
#First is PSOE

#Count how many times got second place
first_second %>% 
  filter(siglas_2[1] == "PSOE") %>% 
  filter(siglas_2 != "PSOE") %>% ungroup() %>% 
  select(elec_date, party, siglas_2, percent) %>% 
  group_by(elec_date, siglas_2) %>% 
  summarise(count = n()) %>% 
  arrange(elec_date, desc(count))

#Sum votes per election of second place party
first_second %>% 
  summarise(first = siglas_2[1],
            second = siglas_2[2],
            
             votes_first = sum(vote_count[siglas_2 == first]),
             votes_second = sum(vote_count[siglas_2 == second]),
            .groups = 'drop' ) %>% 
   
  filter(first== "PSOE") %>% 
  ungroup() %>% 
   
  group_by(elec_date, second, first) %>% 
  summarise(count_second = sum(votes_second), 
            count_first = sum(votes_first), 
            .groups = 'drop') %>% 
 group_by(elec_date) %>% 
 filter(count_second == max(count_second))
```

```{r}
#| eval: false
#First is PP

#Count how many times got second place
first_second %>% 
  filter(siglas_2[1] == "PP") %>% 
  filter(siglas_2 != "PP") %>% ungroup() %>% 
  select(elec_date, party, siglas_2, percent) %>% 
  group_by(elec_date, siglas_2) %>% 
  summarise(count = n()) %>% 
  arrange(elec_date, desc(count))

#Sum votes per election of second place party
first_second %>% 
  summarise(first = siglas_2[1],
            second = siglas_2[2],
            
             votes_first = sum(vote_count[siglas_2 == first]),
             votes_second = sum(vote_count[siglas_2 == second]),
            .groups = 'drop' ) %>% 
   
  filter(first== "PP") %>% 
  ungroup() %>% 
   
  group_by(elec_date, second, first) %>% 
  summarise(count_second = sum(votes_second), 
            count_first = sum(votes_first), 
            .groups = 'drop') %>% 
 group_by(elec_date) %>% 
 filter(count_second == max(count_second))
```

4.  Who benefits from low turnout?

```{r}
#| eval: false
#Long run time, consider optimizing 
tbl(db,"election_data_2") %>% 
  left_join(tbl(db, "abbrev_2"),by = join_by("party" == "denominacion")) %>% 
  left_join(mun_pop_2, by = join_by("cod_mun", "elec_date" == "date")) %>% 
  group_by(elec_date, cod_mun) %>% 
  mutate(participation_pcg = participacion_2/censo_total * 100) %>% 
  select(elec_date, cod_mun, party, siglas_2, participacion_2, vote_count, participation_pcg, censo_total) %>% 
  filter(participation_pcg < 30) %>% 
  arrange(participation_pcg) %>% 
  filter(vote_count == max(vote_count)) %>% 
  head()
```

5.  How to analyze the relationship between census and vote? Is it true that certain parties win in rural areas?

```{r}
#| eval: false
q5_df <- tbl(db, "vote_full") %>% 
  left_join(tbl(db, "abbrev_2"), by = join_by("party" == "denominacion")) %>%
  filter(siglas_2 != "OTHER") %>% 
  left_join(mun_pop_2, by = join_by("cod_mun", "elec_date" == "date")) %>% 
  select(elec_date, cod_mun, censo_total, party, siglas_2, vote_count, valid_votes) %>% collect()

cor(q5_df$censo_total, q5_df$valid_votes)
```

```{r}
#| eval: false
#Vote data frame of interested parties and in rural area (population <= 5000)
#Criteria for rural based on DEMOGRAFÍA DE LA POBLACIÓN RURAL en 2020
rural_winners <- tbl(db, "vote_full") %>% 
  left_join(tbl(db, "abbrev_2"), by = join_by("party" == "denominacion")) %>% 
  filter(siglas_2 != "OTHER") %>% 
  left_join(mun_pop_2, by = join_by("cod_mun", "elec_date" == "date")) %>%
  filter(censo_total <= 5000) %>% 
  collect()

#Winning times in rural zones per party per elections 
rural_winners %>% 
  group_by(elec_date, cod_mun) %>% 
  filter(percent == max(percent)) %>% 
  group_by(elec_date, siglas_2) %>% 
  summarise(win_count = n()) %>% 
  arrange(elec_date,desc(win_count))
```

```{r}
#| eval: false
#2008
rural_winners %>% 
  group_by(elec_date, cod_mun) %>% 
  filter(percent == max(percent) & elec_date == "2008-03-01") %>% 
  ggplot(aes(x = percent, fill = siglas_2)) +
  geom_histogram()
```

6.  How to calibrate the error of the polls (remember that the polls are voting intentions at national level - national parties: PSOE, PP, VOX, CS, MP, UP - IU)?

```{r}
#| eval: false
# Obtaining the average estimated voting intention for each party
voting_intention <- tbl(db, "surveys") %>%
  filter(date_elec >= '2008-01-01') %>% 
  select(siglas, date_elec, field_date_from, field_date_to,estimated_voting_intention) %>%
  mutate(siglas_imp = case_when(siglas == "PSOE" ~ "PSOE",
                                siglas == "PP" ~ "PP",
                                siglas == "CS" ~ "CS",
                                siglas %in% c("PODEMOS", "UP", "IU") ~ "UP-IU",
                                siglas == "MP" ~ "MP",
                                siglas == "VOX" ~ "VOX",
                                TRUE ~ "OTHER"), .after = "siglas") %>% 
  group_by(date_elec, siglas_imp) %>%
  summarise(average_intention = mean(estimated_voting_intention)) %>% 
  collect()

# Calculate the national vote share for each party
vote_share_real <- tbl(db, "vote_full") %>% 
  left_join(tbl(db, "abbrev_2"), by = join_by("party" == "denominacion")) %>%  
  select(elec_date, cod_mun, party, siglas_2, vote_count, valid_votes) %>% 
  mutate(siglas_2 = ifelse(siglas_2 %in% c('PSOE', 'PP','VOX', 'CS', 'MP', 'UP-IU'),siglas_2, 'OTHER')) %>% 
  group_by(elec_date,cod_mun, siglas_2) %>% 
  summarise(total_votes = sum(vote_count), valid_votes) %>% 
  group_by(elec_date, siglas_2) %>% 
  summarise(national_share = sum(total_votes)/sum(valid_votes) *100) %>% 
  collect() 
```

```{r}
#| eval: false
#Comparison(election 2019-11-01)
vote_share_real %>% 
  mutate(elec_date = ymd(elec_date)) %>% 
  filter(elec_date == '2019-11-01') %>% 
  left_join(voting_intention, by = join_by(closest("elec_date" <= "date_elec"),"siglas_2" == "siglas_imp")) %>% 
  mutate(poll_error = average_intention - national_share) %>% 
  ungroup() %>% 
  select(-elec_date) %>% relocate(date_elec, .before = siglas_2)
```

7.  In which election were the polls most wrong?

```{r}
#| eval: false
vote_share_real %>% 
  mutate(elec_date = ymd(elec_date)) %>% 
  left_join(voting_intention, by = join_by(closest("elec_date" <= "date_elec"),"siglas_2" == "siglas_imp")) %>% 
  mutate(poll_error = average_intention - national_share) %>% 
  ungroup() %>% 
  select(-elec_date) %>% relocate(date_elec, .before = siglas_2) %>% 
  group_by(date_elec) %>% 
  summarise(total_error = sum(abs(poll_error), na.rm = TRUE)) %>% 
  slice_max(total_error, n =1)
```

8.  How were the polls wrong in national parties (PSOE, PP, VOX, CS, MP, UP - IU)?

```{r}
#| eval: false
vote_share_real %>% 
  mutate(elec_date = ymd(elec_date)) %>% 
  left_join(voting_intention, by = join_by(closest("elec_date" <= "date_elec"),"siglas_2" == "siglas_imp")) %>% 
  mutate(poll_error = average_intention - national_share) %>% 
  ungroup() %>% 
  select(-elec_date) %>% relocate(date_elec, .before = siglas_2) %>% 
  filter(siglas_2 != "OTHER")
```

9.  Which polling houses got it right the most and which ones deviated the most from the results?

```{r}

```
